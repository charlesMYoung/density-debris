---
interface Props {
  title?: string;
  frontmatter?: {
    title?: string;
  };
}
const { title, frontmatter } = Astro.props;
import Footer from "~/components/Footer.astro";
import Navigation from "~/components/Navigation.astro";
import RandomSVG from "~/components/RandomSVGBackground.astro";
import { ViewTransitions } from "astro:transitions";
import { cn } from "~/utils";
---

<script>
  import {
    argbFromHex,
    themeFromSourceColor,
    applyTheme,
  } from "@material/material-color-utilities";

  const getIsDark = () => {
    const storedTheme = window.localStorage.getItem("theme") ?? '"auto"';
    let presetTheme = "light";
    if (storedTheme === "auto") {
      presetTheme = window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    } else {
      presetTheme = storedTheme;
    }
    return presetTheme === "dark";
  };

  const initTheme = () => {
    const theme = themeFromSourceColor(argbFromHex("#902FA7"), []);
    const isDark = getIsDark();
    // Check if the user has dark mode turned on
    applyTheme(theme, { target: document.body, dark: isDark });
    switchIconStyle(isDark);
  };

  const registerClick = () => {
    const sun = document.querySelector(".sun");
    const moon = document.querySelector(".mooon");
    if (sun) {
      sun.addEventListener("click", () => {
        localStorage.setItem("theme", "light");
        initTheme();
      });
    }

    if (moon) {
      moon.addEventListener("click", () => {
        localStorage.setItem("theme", "dark");
        initTheme();
      });
    }
  };

  const switchIconStyle = (isDark: boolean) => {
    const sun = document.querySelector(".sun") as HTMLElement;
    const moon = document.querySelector(".mooon") as HTMLElement;
    if (sun || moon) {
      if (!isDark) {
        sun.style.display = "none";
        moon.style.display = "block";
      } else {
        sun.style.display = "block";
        moon.style.display = "none";
      }
    }
  };

  initTheme();
  registerClick();

  // Apply the theme to the body by updating custom properties for material tokens
  document.addEventListener("astro:after-swap", () => {
    initTheme();

    registerClick();
  });
</script>

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title || frontmatter.title}</title>
    <ViewTransitions />
    <style>
      @font-face {
        font-family: "smiley-sans";
        src: url("/fonts/SmileySans-Oblique.otf.woff2") format("woff");
        font-weight: normal;
        font-style: normal;
        font-display: swap;
      }
      *::selection {
        background-color: var(--md-sys-color-primary-container);
      }

      :root {
        scrollbar-gutter: stable;
      }
    </style>
  </head>
  <body>
    <section class="flex flex-col bg-background h-screen">
      <Navigation />
      <main
        class={cn(
          "w-full px-4 py-16 sm:px-0 flex-1 text-default-600",
          "max-w-screen-sm md:max-w-screen-md mx-auto",
          "prose md:prose-lg text-on-background dark:prose-invert prose-md"
        )}
      >
        <slot />
      </main>
      <RandomSVG />
      <Footer />
    </section>
  </body>
</html>
